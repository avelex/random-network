// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VRFCoreMetaData contains all meta data concerning the VRFCore contract.
var VRFCoreMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EXECUTOR_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"RELAYER_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"UPGRADE_INTERFACE_VERSION\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addExecutor\",\"inputs\":[{\"name\":\"executor\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addRelayer\",\"inputs\":[{\"name\":\"relayer\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"executeVRF\",\"inputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"publicKey\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"randomness\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"proof\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"handleCrossChainRequest\",\"inputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"sourceChainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"requester\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"parameters\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_proofVerifier\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"proofVerifier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIVRFProofVerifier\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"proxiableUUID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"recoverSigner\",\"inputs\":[{\"name\":\"ethSignedMessageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"splitSignature\",\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"upgradeToAndCall\",\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"verifyExecutorSignature\",\"inputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"randomness\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"proof\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RequestReceived\",\"inputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Upgraded\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"VRFExecuted\",\"inputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1967InvalidImplementation\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1967NonPayable\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidExecutorSignature\",\"inputs\":[{\"name\":\"executor\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRequestStatus\",\"inputs\":[{\"name\":\"got\",\"type\":\"uint8\",\"internalType\":\"enumVRFCoreV1.RequestStatus\"},{\"name\":\"expected\",\"type\":\"uint8\",\"internalType\":\"enumVRFCoreV1.RequestStatus\"}]},{\"type\":\"error\",\"name\":\"InvalidValidator\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RequestAlreadyProcessed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UUPSUnauthorizedCallContext\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UUPSUnsupportedProxiableUUID\",\"inputs\":[{\"name\":\"slot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f80fd5b5061005161005660201b60201c565b6101b6565b5f61006561015460201b60201c565b9050805f0160089054906101000a900460ff16156100af576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101515767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051610148919061019d565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b6101978161017b565b82525050565b5f6020820190506101b05f83018461018e565b92915050565b608051612cb86101dc5f395f81816113c90152818161141e01526115dd0152612cb85ff3fe608060405260043610610129575f3560e01c806352d1902d116100aa578063a217fddf1161006e578063a217fddf146103d1578063a7bb5803146103fb578063ad3cb1cc14610439578063b23e0b2a14610463578063d547741f1461049f578063dd39f00d146104c757610129565b806352d1902d146102db5780637fa417b31461030557806391d148541461032f578063926d7d7f1461036b57806397aba7f91461039557610129565b8063248a9ca3116100f1578063248a9ca31461020b5780632f2ff15d1461024757806336568abe1461026f578063485cc955146102975780634f1ef286146102bf57610129565b806301d47f0c1461012d57806301ffc9a71461015557806307bd0265146101915780631490cd20146101bb5780631f5a0bbe146101e3575b5f80fd5b348015610138575f80fd5b50610153600480360381019061014e9190611cd9565b6104ef565b005b348015610160575f80fd5b5061017b60048036038101906101769190611e05565b61089d565b6040516101889190611e4a565b60405180910390f35b34801561019c575f80fd5b506101a5610916565b6040516101b29190611e72565b60405180910390f35b3480156101c6575f80fd5b506101e160048036038101906101dc9190611f18565b61093a565b005b3480156101ee575f80fd5b5061020960048036038101906102049190611f9c565b610ad7565b005b348015610216575f80fd5b50610231600480360381019061022c9190611fc7565b610b12565b60405161023e9190611e72565b60405180910390f35b348015610252575f80fd5b5061026d60048036038101906102689190611ff2565b610b3c565b005b34801561027a575f80fd5b5061029560048036038101906102909190611ff2565b610b5e565b005b3480156102a2575f80fd5b506102bd60048036038101906102b89190612030565b610bd9565b005b6102d960048036038101906102d491906121a6565b610daf565b005b3480156102e6575f80fd5b506102ef610dce565b6040516102fc9190611e72565b60405180910390f35b348015610310575f80fd5b50610319610dff565b604051610326919061225b565b60405180910390f35b34801561033a575f80fd5b5061035560048036038101906103509190611ff2565b610e24565b6040516103629190611e4a565b60405180910390f35b348015610376575f80fd5b5061037f610e95565b60405161038c9190611e72565b60405180910390f35b3480156103a0575f80fd5b506103bb60048036038101906103b69190612274565b610eb9565b6040516103c891906122dd565b60405180910390f35b3480156103dc575f80fd5b506103e5610f23565b6040516103f29190611e72565b60405180910390f35b348015610406575f80fd5b50610421600480360381019061041c91906122f6565b610f29565b60405161043093929190612358565b60405180910390f35b348015610444575f80fd5b5061044d610f8e565b60405161045a91906123ed565b60405180910390f35b34801561046e575f80fd5b506104896004803603810190610484919061240d565b610fc7565b6040516104969190611e4a565b60405180910390f35b3480156104aa575f80fd5b506104c560048036038101906104c09190611ff2565b61106a565b005b3480156104d2575f80fd5b506104ed60048036038101906104e89190611f9c565b61108c565b005b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610519816110c7565b5f805f8b81526020019081526020015f2090505f600381111561053f5761053e6124d8565b5b816004015f9054906101000a900460ff166003811115610562576105616124d8565b5b146105b657806004015f9054906101000a900460ff165f6040517fa0be636e0000000000000000000000000000000000000000000000000000000081526004016105ad92919061254b565b60405180910390fd5b61068c8a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505088888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505087878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505033610fc7565b6106cd57336040517f0693ae810000000000000000000000000000000000000000000000000000000081526004016106c491906122dd565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a90ec1c58a88888c8c6040518663ffffffff1660e01b815260040161072f9594939291906125c7565b602060405180830381865afa15801561074a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076e9190612638565b6107a4576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b338160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088816005019060026107fa929190611bb8565b50878782600801918261080e92919061285e565b50858582600701918261082292919061285e565b506002816004015f6101000a81548160ff0219169083600381111561084a576108496124d8565b5b02179055506108638a60016110db90919063ffffffff16565b50897feba37516eae8078054e0eeb0ac756b908d5735aa72b5fac72f04da912287fab560405160405180910390a250505050505050505050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061090f575061090e826110f0565b5b9050919050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610964816110c7565b5f805f8881526020019081526020015f2060030154146109b0576040517fa6bc74c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845f808881526020019081526020015f205f0181905550835f808881526020019081526020015f206001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082825f808981526020019081526020015f206002019182610a3a92919061285e565b50425f808881526020019081526020015f20600301819055505f805f8881526020019081526020015f206004015f6101000a81548160ff02191690836003811115610a8857610a876124d8565b5b0217905550610aa186600161115990919063ffffffff16565b50857f01fec4a455e3c96956abfbcc392b36849c44e005cdd404e99f5247731e4e65bf60405160405180910390a2505050505050565b5f801b610ae3816110c7565b610b0d7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e638361116e565b505050565b5f80610b1c611266565b9050805f015f8481526020019081526020015f2060010154915050919050565b610b4582610b12565b610b4e816110c7565b610b58838361116e565b50505050565b610b6661128d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bca576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bd48282611294565b505050565b5f610be261138c565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff16148015610c2a5750825b90505f60018367ffffffffffffffff16148015610c5d57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610c6b575080155b15610ca2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610cef576001855f0160086101000a81548160ff0219169083151502179055505b610cf76113b3565b610cff6113bd565b610d0b5f801b8861116e565b508560035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315610da6575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610d9d9190612977565b60405180910390a15b50505050505050565b610db76113c7565b610dc0826114ad565b610dca82826114bd565b5050565b5f610dd76115db565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80610e2e611266565b9050805f015f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505092915050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b5f805f80610ec685610f29565b9250925092506001868285856040515f8152602001604052604051610eee9493929190612990565b6020604051602081039080840390855afa158015610f0e573d5f803e3d5ffd5b50505060206040510351935050505092915050565b5f801b81565b5f805f6041845114610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6790612a1d565b60405180910390fd5b602084015192506040840151915060608401515f1a90509193909250565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f80868686604051602001610fde93929190612a9f565b60405160208183030381529060405290505f818051906020012090505f8160405160200161100c9190612b27565b6040516020818303038152906040528051906020012090508473ffffffffffffffffffffffffffffffffffffffff166110458288610eb9565b73ffffffffffffffffffffffffffffffffffffffff1614935050505095945050505050565b61107382610b12565b61107c816110c7565b6110868383611294565b50505050565b5f801b611098816110c7565b6110c27fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc48361116e565b505050565b6110d8816110d361128d565b611662565b50565b5f6110e8835f01836116b3565b905092915050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f611166835f01836117af565b905092915050565b5f80611178611266565b90506111848484610e24565b61125b576001815f015f8681526020019081526020015f205f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506111f761128d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050611260565b5f9150505b92915050565b5f7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b5f33905090565b5f8061129e611266565b90506112aa8484610e24565b15611381575f815f015f8681526020019081526020015f205f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061131d61128d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050611386565b5f9150505b92915050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6113bb611816565b565b6113c5611816565b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061147457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661145b611856565b73ffffffffffffffffffffffffffffffffffffffff1614155b156114ab576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f801b6114b9816110c7565b5050565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561152557506040513d601f19601f820116820180604052508101906115229190612b60565b60015b61156657816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161155d91906122dd565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146115cc57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016115c39190611e72565b60405180910390fd5b6115d683836118a9565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611660576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61166c8282610e24565b6116af5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016116a6929190612b8b565b60405180910390fd5b5050565b5f80836001015f8481526020019081526020015f205490505f81146117a4575f6001826116e09190612bdf565b90505f6001865f01805490506116f69190612bdf565b905080821461175c575f865f01828154811061171557611714612c12565b5b905f5260205f200154905080875f01848154811061173657611735612c12565b5b905f5260205f20018190555083876001015f8381526020019081526020015f2081905550505b855f0180548061176f5761176e612c3f565b5b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506117a9565b5f9150505b92915050565b5f6117ba838361191b565b61180c57825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f208190555060019050611810565b5f90505b92915050565b61181e61193b565b611854576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f6118827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611959565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6118b282611962565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f8151111561190e576119088282611a2b565b50611917565b611916611aab565b5b5050565b5f80836001015f8481526020019081526020015f20541415905092915050565b5f61194461138c565b5f0160089054906101000a900460ff16905090565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b036119bd57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016119b491906122dd565b60405180910390fd5b806119e97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611959565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff1684604051611a549190612c6c565b5f60405180830381855af49150503d805f8114611a8c576040519150601f19603f3d011682016040523d82523d5f602084013e611a91565b606091505b5091509150611aa1858383611ae7565b9250505092915050565b5f341115611ae5576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606082611afc57611af782611b74565b611b6c565b5f8251148015611b2257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611b6457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611b5b91906122dd565b60405180910390fd5b819050611b6d565b5b9392505050565b5f81511115611b865780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260028101928215611be7579160200282015b82811115611be6578235825591602001919060010190611bcb565b5b509050611bf49190611bf8565b5090565b5b80821115611c0f575f815f905550600101611bf9565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b611c3681611c24565b8114611c40575f80fd5b50565b5f81359050611c5181611c2d565b92915050565b5f80fd5b5f81905082602060020282011115611c7657611c75611c57565b5b92915050565b5f80fd5b5f80fd5b5f8083601f840112611c9957611c98611c7c565b5b8235905067ffffffffffffffff811115611cb657611cb5611c80565b5b602083019150836001820283011115611cd257611cd1611c57565b5b9250929050565b5f805f805f805f8060c0898b031215611cf557611cf4611c1c565b5b5f611d028b828c01611c43565b9850506020611d138b828c01611c5b565b975050606089013567ffffffffffffffff811115611d3457611d33611c20565b5b611d408b828c01611c84565b9650965050608089013567ffffffffffffffff811115611d6357611d62611c20565b5b611d6f8b828c01611c84565b945094505060a089013567ffffffffffffffff811115611d9257611d91611c20565b5b611d9e8b828c01611c84565b92509250509295985092959890939650565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611de481611db0565b8114611dee575f80fd5b50565b5f81359050611dff81611ddb565b92915050565b5f60208284031215611e1a57611e19611c1c565b5b5f611e2784828501611df1565b91505092915050565b5f8115159050919050565b611e4481611e30565b82525050565b5f602082019050611e5d5f830184611e3b565b92915050565b611e6c81611c24565b82525050565b5f602082019050611e855f830184611e63565b92915050565b5f819050919050565b611e9d81611e8b565b8114611ea7575f80fd5b50565b5f81359050611eb881611e94565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ee782611ebe565b9050919050565b611ef781611edd565b8114611f01575f80fd5b50565b5f81359050611f1281611eee565b92915050565b5f805f805f60808688031215611f3157611f30611c1c565b5b5f611f3e88828901611c43565b9550506020611f4f88828901611eaa565b9450506040611f6088828901611f04565b935050606086013567ffffffffffffffff811115611f8157611f80611c20565b5b611f8d88828901611c84565b92509250509295509295909350565b5f60208284031215611fb157611fb0611c1c565b5b5f611fbe84828501611f04565b91505092915050565b5f60208284031215611fdc57611fdb611c1c565b5b5f611fe984828501611c43565b91505092915050565b5f806040838503121561200857612007611c1c565b5b5f61201585828601611c43565b925050602061202685828601611f04565b9150509250929050565b5f806040838503121561204657612045611c1c565b5b5f61205385828601611f04565b925050602061206485828601611f04565b9150509250929050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6120b882612072565b810181811067ffffffffffffffff821117156120d7576120d6612082565b5b80604052505050565b5f6120e9611c13565b90506120f582826120af565b919050565b5f67ffffffffffffffff82111561211457612113612082565b5b61211d82612072565b9050602081019050919050565b828183375f83830152505050565b5f61214a612145846120fa565b6120e0565b9050828152602081018484840111156121665761216561206e565b5b61217184828561212a565b509392505050565b5f82601f83011261218d5761218c611c7c565b5b813561219d848260208601612138565b91505092915050565b5f80604083850312156121bc576121bb611c1c565b5b5f6121c985828601611f04565b925050602083013567ffffffffffffffff8111156121ea576121e9611c20565b5b6121f685828601612179565b9150509250929050565b5f819050919050565b5f61222361221e61221984611ebe565b612200565b611ebe565b9050919050565b5f61223482612209565b9050919050565b5f6122458261222a565b9050919050565b6122558161223b565b82525050565b5f60208201905061226e5f83018461224c565b92915050565b5f806040838503121561228a57612289611c1c565b5b5f61229785828601611c43565b925050602083013567ffffffffffffffff8111156122b8576122b7611c20565b5b6122c485828601612179565b9150509250929050565b6122d781611edd565b82525050565b5f6020820190506122f05f8301846122ce565b92915050565b5f6020828403121561230b5761230a611c1c565b5b5f82013567ffffffffffffffff81111561232857612327611c20565b5b61233484828501612179565b91505092915050565b5f60ff82169050919050565b6123528161233d565b82525050565b5f60608201905061236b5f830186611e63565b6123786020830185611e63565b6123856040830184612349565b949350505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6123bf8261238d565b6123c98185612397565b93506123d98185602086016123a7565b6123e281612072565b840191505092915050565b5f6020820190508181035f83015261240581846123b5565b905092915050565b5f805f805f60a0868803121561242657612425611c1c565b5b5f61243388828901611c43565b955050602086013567ffffffffffffffff81111561245457612453611c20565b5b61246088828901612179565b945050604086013567ffffffffffffffff81111561248157612480611c20565b5b61248d88828901612179565b935050606086013567ffffffffffffffff8111156124ae576124ad611c20565b5b6124ba88828901612179565b92505060806124cb88828901611f04565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110612516576125156124d8565b5b50565b5f81905061252682612505565b919050565b5f61253582612519565b9050919050565b6125458161252b565b82525050565b5f60408201905061255e5f83018561253c565b61256b602083018461253c565b9392505050565b82818337505050565b61258760408383612572565b5050565b5f82825260208201905092915050565b5f6125a6838561258b565b93506125b383858461212a565b6125bc83612072565b840190509392505050565b5f6080820190506125da5f83018861257b565b81810360408301526125ed81868861259b565b9050818103606083015261260281848661259b565b90509695505050505050565b61261781611e30565b8114612621575f80fd5b50565b5f815190506126328161260e565b92915050565b5f6020828403121561264d5761264c611c1c565b5b5f61265a84828501612624565b91505092915050565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806126b157607f821691505b6020821081036126c4576126c361266d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026127267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826126eb565b61273086836126eb565b95508019841693508086168417925050509392505050565b5f61276261275d61275884611e8b565b612200565b611e8b565b9050919050565b5f819050919050565b61277b83612748565b61278f61278782612769565b8484546126f7565b825550505050565b5f90565b6127a3612797565b6127ae818484612772565b505050565b5b818110156127d1576127c65f8261279b565b6001810190506127b4565b5050565b601f821115612816576127e7816126ca565b6127f0846126dc565b810160208510156127ff578190505b61281361280b856126dc565b8301826127b3565b50505b505050565b5f82821c905092915050565b5f6128365f198460080261281b565b1980831691505092915050565b5f61284e8383612827565b9150826002028217905092915050565b6128688383612663565b67ffffffffffffffff81111561288157612880612082565b5b61288b825461269a565b6128968282856127d5565b5f601f8311600181146128c3575f84156128b1578287013590505b6128bb8582612843565b865550612922565b601f1984166128d1866126ca565b5f5b828110156128f8578489013582556001820191506020850194506020810190506128d3565b868310156129155784890135612911601f891682612827565b8355505b6001600288020188555050505b50505050505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f61296161295c6129578461292b565b612200565b612934565b9050919050565b61297181612947565b82525050565b5f60208201905061298a5f830184612968565b92915050565b5f6080820190506129a35f830187611e63565b6129b06020830186612349565b6129bd6040830185611e63565b6129ca6060830184611e63565b95945050505050565b7f696e76616c6964207369676e6174757265206c656e67746800000000000000005f82015250565b5f612a07601883612397565b9150612a12826129d3565b602082019050919050565b5f6020820190508181035f830152612a34816129fb565b9050919050565b5f819050919050565b612a55612a5082611c24565b612a3b565b82525050565b5f81519050919050565b5f81905092915050565b5f612a7982612a5b565b612a838185612a65565b9350612a938185602086016123a7565b80840191505092915050565b5f612aaa8286612a44565b602082019150612aba8285612a6f565b9150612ac68284612a6f565b9150819050949350505050565b5f81905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f82015250565b5f612b11601c83612ad3565b9150612b1c82612add565b601c82019050919050565b5f612b3182612b05565b9150612b3d8284612a44565b60208201915081905092915050565b5f81519050612b5a81611c2d565b92915050565b5f60208284031215612b7557612b74611c1c565b5b5f612b8284828501612b4c565b91505092915050565b5f604082019050612b9e5f8301856122ce565b612bab6020830184611e63565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612be982611e8b565b9150612bf483611e8b565b9250828203905081811115612c0c57612c0b612bb2565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f612c778284612a6f565b91508190509291505056fea2646970667358221220a4c2a165012da8db874e964210fc194a324423ac49a3c2b02c4ebfa37f7ed36b64736f6c634300081a0033",
}

// VRFCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use VRFCoreMetaData.ABI instead.
var VRFCoreABI = VRFCoreMetaData.ABI

// VRFCoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VRFCoreMetaData.Bin instead.
var VRFCoreBin = VRFCoreMetaData.Bin

// DeployVRFCore deploys a new Ethereum contract, binding an instance of VRFCore to it.
func DeployVRFCore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *VRFCore, error) {
	parsed, err := VRFCoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VRFCoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VRFCore{VRFCoreCaller: VRFCoreCaller{contract: contract}, VRFCoreTransactor: VRFCoreTransactor{contract: contract}, VRFCoreFilterer: VRFCoreFilterer{contract: contract}}, nil
}

// VRFCore is an auto generated Go binding around an Ethereum contract.
type VRFCore struct {
	VRFCoreCaller     // Read-only binding to the contract
	VRFCoreTransactor // Write-only binding to the contract
	VRFCoreFilterer   // Log filterer for contract events
}

// VRFCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type VRFCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VRFCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VRFCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VRFCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VRFCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VRFCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VRFCoreSession struct {
	Contract     *VRFCore          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VRFCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VRFCoreCallerSession struct {
	Contract *VRFCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// VRFCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VRFCoreTransactorSession struct {
	Contract     *VRFCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// VRFCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type VRFCoreRaw struct {
	Contract *VRFCore // Generic contract binding to access the raw methods on
}

// VRFCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VRFCoreCallerRaw struct {
	Contract *VRFCoreCaller // Generic read-only contract binding to access the raw methods on
}

// VRFCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VRFCoreTransactorRaw struct {
	Contract *VRFCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVRFCore creates a new instance of VRFCore, bound to a specific deployed contract.
func NewVRFCore(address common.Address, backend bind.ContractBackend) (*VRFCore, error) {
	contract, err := bindVRFCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VRFCore{VRFCoreCaller: VRFCoreCaller{contract: contract}, VRFCoreTransactor: VRFCoreTransactor{contract: contract}, VRFCoreFilterer: VRFCoreFilterer{contract: contract}}, nil
}

// NewVRFCoreCaller creates a new read-only instance of VRFCore, bound to a specific deployed contract.
func NewVRFCoreCaller(address common.Address, caller bind.ContractCaller) (*VRFCoreCaller, error) {
	contract, err := bindVRFCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCoreCaller{contract: contract}, nil
}

// NewVRFCoreTransactor creates a new write-only instance of VRFCore, bound to a specific deployed contract.
func NewVRFCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*VRFCoreTransactor, error) {
	contract, err := bindVRFCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCoreTransactor{contract: contract}, nil
}

// NewVRFCoreFilterer creates a new log filterer instance of VRFCore, bound to a specific deployed contract.
func NewVRFCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*VRFCoreFilterer, error) {
	contract, err := bindVRFCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VRFCoreFilterer{contract: contract}, nil
}

// bindVRFCore binds a generic wrapper to an already deployed contract.
func bindVRFCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VRFCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VRFCore *VRFCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFCore.Contract.VRFCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VRFCore *VRFCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFCore.Contract.VRFCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VRFCore *VRFCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFCore.Contract.VRFCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VRFCore *VRFCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VRFCore *VRFCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VRFCore *VRFCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFCore.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _VRFCore.Contract.DEFAULTADMINROLE(&_VRFCore.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _VRFCore.Contract.DEFAULTADMINROLE(&_VRFCore.CallOpts)
}

// EXECUTORROLE is a free data retrieval call binding the contract method 0x07bd0265.
//
// Solidity: function EXECUTOR_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreCaller) EXECUTORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "EXECUTOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EXECUTORROLE is a free data retrieval call binding the contract method 0x07bd0265.
//
// Solidity: function EXECUTOR_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreSession) EXECUTORROLE() ([32]byte, error) {
	return _VRFCore.Contract.EXECUTORROLE(&_VRFCore.CallOpts)
}

// EXECUTORROLE is a free data retrieval call binding the contract method 0x07bd0265.
//
// Solidity: function EXECUTOR_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreCallerSession) EXECUTORROLE() ([32]byte, error) {
	return _VRFCore.Contract.EXECUTORROLE(&_VRFCore.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreCaller) RELAYERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "RELAYER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreSession) RELAYERROLE() ([32]byte, error) {
	return _VRFCore.Contract.RELAYERROLE(&_VRFCore.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_VRFCore *VRFCoreCallerSession) RELAYERROLE() ([32]byte, error) {
	return _VRFCore.Contract.RELAYERROLE(&_VRFCore.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_VRFCore *VRFCoreCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_VRFCore *VRFCoreSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _VRFCore.Contract.UPGRADEINTERFACEVERSION(&_VRFCore.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_VRFCore *VRFCoreCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _VRFCore.Contract.UPGRADEINTERFACEVERSION(&_VRFCore.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_VRFCore *VRFCoreCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_VRFCore *VRFCoreSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _VRFCore.Contract.GetRoleAdmin(&_VRFCore.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_VRFCore *VRFCoreCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _VRFCore.Contract.GetRoleAdmin(&_VRFCore.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_VRFCore *VRFCoreCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_VRFCore *VRFCoreSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _VRFCore.Contract.HasRole(&_VRFCore.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_VRFCore *VRFCoreCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _VRFCore.Contract.HasRole(&_VRFCore.CallOpts, role, account)
}

// ProofVerifier is a free data retrieval call binding the contract method 0x7fa417b3.
//
// Solidity: function proofVerifier() view returns(address)
func (_VRFCore *VRFCoreCaller) ProofVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "proofVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProofVerifier is a free data retrieval call binding the contract method 0x7fa417b3.
//
// Solidity: function proofVerifier() view returns(address)
func (_VRFCore *VRFCoreSession) ProofVerifier() (common.Address, error) {
	return _VRFCore.Contract.ProofVerifier(&_VRFCore.CallOpts)
}

// ProofVerifier is a free data retrieval call binding the contract method 0x7fa417b3.
//
// Solidity: function proofVerifier() view returns(address)
func (_VRFCore *VRFCoreCallerSession) ProofVerifier() (common.Address, error) {
	return _VRFCore.Contract.ProofVerifier(&_VRFCore.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_VRFCore *VRFCoreCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_VRFCore *VRFCoreSession) ProxiableUUID() ([32]byte, error) {
	return _VRFCore.Contract.ProxiableUUID(&_VRFCore.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_VRFCore *VRFCoreCallerSession) ProxiableUUID() ([32]byte, error) {
	return _VRFCore.Contract.ProxiableUUID(&_VRFCore.CallOpts)
}

// RecoverSigner is a free data retrieval call binding the contract method 0x97aba7f9.
//
// Solidity: function recoverSigner(bytes32 ethSignedMessageHash, bytes signature) pure returns(address)
func (_VRFCore *VRFCoreCaller) RecoverSigner(opts *bind.CallOpts, ethSignedMessageHash [32]byte, signature []byte) (common.Address, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "recoverSigner", ethSignedMessageHash, signature)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RecoverSigner is a free data retrieval call binding the contract method 0x97aba7f9.
//
// Solidity: function recoverSigner(bytes32 ethSignedMessageHash, bytes signature) pure returns(address)
func (_VRFCore *VRFCoreSession) RecoverSigner(ethSignedMessageHash [32]byte, signature []byte) (common.Address, error) {
	return _VRFCore.Contract.RecoverSigner(&_VRFCore.CallOpts, ethSignedMessageHash, signature)
}

// RecoverSigner is a free data retrieval call binding the contract method 0x97aba7f9.
//
// Solidity: function recoverSigner(bytes32 ethSignedMessageHash, bytes signature) pure returns(address)
func (_VRFCore *VRFCoreCallerSession) RecoverSigner(ethSignedMessageHash [32]byte, signature []byte) (common.Address, error) {
	return _VRFCore.Contract.RecoverSigner(&_VRFCore.CallOpts, ethSignedMessageHash, signature)
}

// SplitSignature is a free data retrieval call binding the contract method 0xa7bb5803.
//
// Solidity: function splitSignature(bytes sig) pure returns(bytes32 r, bytes32 s, uint8 v)
func (_VRFCore *VRFCoreCaller) SplitSignature(opts *bind.CallOpts, sig []byte) (struct {
	R [32]byte
	S [32]byte
	V uint8
}, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "splitSignature", sig)

	outstruct := new(struct {
		R [32]byte
		S [32]byte
		V uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.R = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.V = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// SplitSignature is a free data retrieval call binding the contract method 0xa7bb5803.
//
// Solidity: function splitSignature(bytes sig) pure returns(bytes32 r, bytes32 s, uint8 v)
func (_VRFCore *VRFCoreSession) SplitSignature(sig []byte) (struct {
	R [32]byte
	S [32]byte
	V uint8
}, error) {
	return _VRFCore.Contract.SplitSignature(&_VRFCore.CallOpts, sig)
}

// SplitSignature is a free data retrieval call binding the contract method 0xa7bb5803.
//
// Solidity: function splitSignature(bytes sig) pure returns(bytes32 r, bytes32 s, uint8 v)
func (_VRFCore *VRFCoreCallerSession) SplitSignature(sig []byte) (struct {
	R [32]byte
	S [32]byte
	V uint8
}, error) {
	return _VRFCore.Contract.SplitSignature(&_VRFCore.CallOpts, sig)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_VRFCore *VRFCoreCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_VRFCore *VRFCoreSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _VRFCore.Contract.SupportsInterface(&_VRFCore.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_VRFCore *VRFCoreCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _VRFCore.Contract.SupportsInterface(&_VRFCore.CallOpts, interfaceId)
}

// VerifyExecutorSignature is a free data retrieval call binding the contract method 0xb23e0b2a.
//
// Solidity: function verifyExecutorSignature(bytes32 requestId, bytes randomness, bytes proof, bytes signature, address signer) pure returns(bool)
func (_VRFCore *VRFCoreCaller) VerifyExecutorSignature(opts *bind.CallOpts, requestId [32]byte, randomness []byte, proof []byte, signature []byte, signer common.Address) (bool, error) {
	var out []interface{}
	err := _VRFCore.contract.Call(opts, &out, "verifyExecutorSignature", requestId, randomness, proof, signature, signer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyExecutorSignature is a free data retrieval call binding the contract method 0xb23e0b2a.
//
// Solidity: function verifyExecutorSignature(bytes32 requestId, bytes randomness, bytes proof, bytes signature, address signer) pure returns(bool)
func (_VRFCore *VRFCoreSession) VerifyExecutorSignature(requestId [32]byte, randomness []byte, proof []byte, signature []byte, signer common.Address) (bool, error) {
	return _VRFCore.Contract.VerifyExecutorSignature(&_VRFCore.CallOpts, requestId, randomness, proof, signature, signer)
}

// VerifyExecutorSignature is a free data retrieval call binding the contract method 0xb23e0b2a.
//
// Solidity: function verifyExecutorSignature(bytes32 requestId, bytes randomness, bytes proof, bytes signature, address signer) pure returns(bool)
func (_VRFCore *VRFCoreCallerSession) VerifyExecutorSignature(requestId [32]byte, randomness []byte, proof []byte, signature []byte, signer common.Address) (bool, error) {
	return _VRFCore.Contract.VerifyExecutorSignature(&_VRFCore.CallOpts, requestId, randomness, proof, signature, signer)
}

// AddExecutor is a paid mutator transaction binding the contract method 0x1f5a0bbe.
//
// Solidity: function addExecutor(address executor) returns()
func (_VRFCore *VRFCoreTransactor) AddExecutor(opts *bind.TransactOpts, executor common.Address) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "addExecutor", executor)
}

// AddExecutor is a paid mutator transaction binding the contract method 0x1f5a0bbe.
//
// Solidity: function addExecutor(address executor) returns()
func (_VRFCore *VRFCoreSession) AddExecutor(executor common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.AddExecutor(&_VRFCore.TransactOpts, executor)
}

// AddExecutor is a paid mutator transaction binding the contract method 0x1f5a0bbe.
//
// Solidity: function addExecutor(address executor) returns()
func (_VRFCore *VRFCoreTransactorSession) AddExecutor(executor common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.AddExecutor(&_VRFCore.TransactOpts, executor)
}

// AddRelayer is a paid mutator transaction binding the contract method 0xdd39f00d.
//
// Solidity: function addRelayer(address relayer) returns()
func (_VRFCore *VRFCoreTransactor) AddRelayer(opts *bind.TransactOpts, relayer common.Address) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "addRelayer", relayer)
}

// AddRelayer is a paid mutator transaction binding the contract method 0xdd39f00d.
//
// Solidity: function addRelayer(address relayer) returns()
func (_VRFCore *VRFCoreSession) AddRelayer(relayer common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.AddRelayer(&_VRFCore.TransactOpts, relayer)
}

// AddRelayer is a paid mutator transaction binding the contract method 0xdd39f00d.
//
// Solidity: function addRelayer(address relayer) returns()
func (_VRFCore *VRFCoreTransactorSession) AddRelayer(relayer common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.AddRelayer(&_VRFCore.TransactOpts, relayer)
}

// ExecuteVRF is a paid mutator transaction binding the contract method 0x01d47f0c.
//
// Solidity: function executeVRF(bytes32 requestId, uint256[2] publicKey, bytes randomness, bytes proof, bytes signature) returns()
func (_VRFCore *VRFCoreTransactor) ExecuteVRF(opts *bind.TransactOpts, requestId [32]byte, publicKey [2]*big.Int, randomness []byte, proof []byte, signature []byte) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "executeVRF", requestId, publicKey, randomness, proof, signature)
}

// ExecuteVRF is a paid mutator transaction binding the contract method 0x01d47f0c.
//
// Solidity: function executeVRF(bytes32 requestId, uint256[2] publicKey, bytes randomness, bytes proof, bytes signature) returns()
func (_VRFCore *VRFCoreSession) ExecuteVRF(requestId [32]byte, publicKey [2]*big.Int, randomness []byte, proof []byte, signature []byte) (*types.Transaction, error) {
	return _VRFCore.Contract.ExecuteVRF(&_VRFCore.TransactOpts, requestId, publicKey, randomness, proof, signature)
}

// ExecuteVRF is a paid mutator transaction binding the contract method 0x01d47f0c.
//
// Solidity: function executeVRF(bytes32 requestId, uint256[2] publicKey, bytes randomness, bytes proof, bytes signature) returns()
func (_VRFCore *VRFCoreTransactorSession) ExecuteVRF(requestId [32]byte, publicKey [2]*big.Int, randomness []byte, proof []byte, signature []byte) (*types.Transaction, error) {
	return _VRFCore.Contract.ExecuteVRF(&_VRFCore.TransactOpts, requestId, publicKey, randomness, proof, signature)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_VRFCore *VRFCoreTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_VRFCore *VRFCoreSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.GrantRole(&_VRFCore.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_VRFCore *VRFCoreTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.GrantRole(&_VRFCore.TransactOpts, role, account)
}

// HandleCrossChainRequest is a paid mutator transaction binding the contract method 0x1490cd20.
//
// Solidity: function handleCrossChainRequest(bytes32 requestId, uint256 sourceChainId, address requester, bytes parameters) returns()
func (_VRFCore *VRFCoreTransactor) HandleCrossChainRequest(opts *bind.TransactOpts, requestId [32]byte, sourceChainId *big.Int, requester common.Address, parameters []byte) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "handleCrossChainRequest", requestId, sourceChainId, requester, parameters)
}

// HandleCrossChainRequest is a paid mutator transaction binding the contract method 0x1490cd20.
//
// Solidity: function handleCrossChainRequest(bytes32 requestId, uint256 sourceChainId, address requester, bytes parameters) returns()
func (_VRFCore *VRFCoreSession) HandleCrossChainRequest(requestId [32]byte, sourceChainId *big.Int, requester common.Address, parameters []byte) (*types.Transaction, error) {
	return _VRFCore.Contract.HandleCrossChainRequest(&_VRFCore.TransactOpts, requestId, sourceChainId, requester, parameters)
}

// HandleCrossChainRequest is a paid mutator transaction binding the contract method 0x1490cd20.
//
// Solidity: function handleCrossChainRequest(bytes32 requestId, uint256 sourceChainId, address requester, bytes parameters) returns()
func (_VRFCore *VRFCoreTransactorSession) HandleCrossChainRequest(requestId [32]byte, sourceChainId *big.Int, requester common.Address, parameters []byte) (*types.Transaction, error) {
	return _VRFCore.Contract.HandleCrossChainRequest(&_VRFCore.TransactOpts, requestId, sourceChainId, requester, parameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _admin, address _proofVerifier) returns()
func (_VRFCore *VRFCoreTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _proofVerifier common.Address) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "initialize", _admin, _proofVerifier)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _admin, address _proofVerifier) returns()
func (_VRFCore *VRFCoreSession) Initialize(_admin common.Address, _proofVerifier common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.Initialize(&_VRFCore.TransactOpts, _admin, _proofVerifier)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _admin, address _proofVerifier) returns()
func (_VRFCore *VRFCoreTransactorSession) Initialize(_admin common.Address, _proofVerifier common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.Initialize(&_VRFCore.TransactOpts, _admin, _proofVerifier)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_VRFCore *VRFCoreTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_VRFCore *VRFCoreSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.RenounceRole(&_VRFCore.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_VRFCore *VRFCoreTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.RenounceRole(&_VRFCore.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_VRFCore *VRFCoreTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_VRFCore *VRFCoreSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.RevokeRole(&_VRFCore.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_VRFCore *VRFCoreTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _VRFCore.Contract.RevokeRole(&_VRFCore.TransactOpts, role, account)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_VRFCore *VRFCoreTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _VRFCore.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_VRFCore *VRFCoreSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _VRFCore.Contract.UpgradeToAndCall(&_VRFCore.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_VRFCore *VRFCoreTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _VRFCore.Contract.UpgradeToAndCall(&_VRFCore.TransactOpts, newImplementation, data)
}

// VRFCoreInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the VRFCore contract.
type VRFCoreInitializedIterator struct {
	Event *VRFCoreInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreInitialized represents a Initialized event raised by the VRFCore contract.
type VRFCoreInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_VRFCore *VRFCoreFilterer) FilterInitialized(opts *bind.FilterOpts) (*VRFCoreInitializedIterator, error) {

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &VRFCoreInitializedIterator{contract: _VRFCore.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_VRFCore *VRFCoreFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *VRFCoreInitialized) (event.Subscription, error) {

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreInitialized)
				if err := _VRFCore.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_VRFCore *VRFCoreFilterer) ParseInitialized(log types.Log) (*VRFCoreInitialized, error) {
	event := new(VRFCoreInitialized)
	if err := _VRFCore.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VRFCoreRequestReceivedIterator is returned from FilterRequestReceived and is used to iterate over the raw logs and unpacked data for RequestReceived events raised by the VRFCore contract.
type VRFCoreRequestReceivedIterator struct {
	Event *VRFCoreRequestReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreRequestReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreRequestReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreRequestReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreRequestReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreRequestReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreRequestReceived represents a RequestReceived event raised by the VRFCore contract.
type VRFCoreRequestReceived struct {
	RequestId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestReceived is a free log retrieval operation binding the contract event 0x01fec4a455e3c96956abfbcc392b36849c44e005cdd404e99f5247731e4e65bf.
//
// Solidity: event RequestReceived(bytes32 indexed requestId)
func (_VRFCore *VRFCoreFilterer) FilterRequestReceived(opts *bind.FilterOpts, requestId [][32]byte) (*VRFCoreRequestReceivedIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "RequestReceived", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoreRequestReceivedIterator{contract: _VRFCore.contract, event: "RequestReceived", logs: logs, sub: sub}, nil
}

// WatchRequestReceived is a free log subscription operation binding the contract event 0x01fec4a455e3c96956abfbcc392b36849c44e005cdd404e99f5247731e4e65bf.
//
// Solidity: event RequestReceived(bytes32 indexed requestId)
func (_VRFCore *VRFCoreFilterer) WatchRequestReceived(opts *bind.WatchOpts, sink chan<- *VRFCoreRequestReceived, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "RequestReceived", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreRequestReceived)
				if err := _VRFCore.contract.UnpackLog(event, "RequestReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestReceived is a log parse operation binding the contract event 0x01fec4a455e3c96956abfbcc392b36849c44e005cdd404e99f5247731e4e65bf.
//
// Solidity: event RequestReceived(bytes32 indexed requestId)
func (_VRFCore *VRFCoreFilterer) ParseRequestReceived(log types.Log) (*VRFCoreRequestReceived, error) {
	event := new(VRFCoreRequestReceived)
	if err := _VRFCore.contract.UnpackLog(event, "RequestReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VRFCoreRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the VRFCore contract.
type VRFCoreRoleAdminChangedIterator struct {
	Event *VRFCoreRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreRoleAdminChanged represents a RoleAdminChanged event raised by the VRFCore contract.
type VRFCoreRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_VRFCore *VRFCoreFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*VRFCoreRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoreRoleAdminChangedIterator{contract: _VRFCore.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_VRFCore *VRFCoreFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *VRFCoreRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreRoleAdminChanged)
				if err := _VRFCore.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_VRFCore *VRFCoreFilterer) ParseRoleAdminChanged(log types.Log) (*VRFCoreRoleAdminChanged, error) {
	event := new(VRFCoreRoleAdminChanged)
	if err := _VRFCore.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VRFCoreRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the VRFCore contract.
type VRFCoreRoleGrantedIterator struct {
	Event *VRFCoreRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreRoleGranted represents a RoleGranted event raised by the VRFCore contract.
type VRFCoreRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_VRFCore *VRFCoreFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*VRFCoreRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoreRoleGrantedIterator{contract: _VRFCore.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_VRFCore *VRFCoreFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *VRFCoreRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreRoleGranted)
				if err := _VRFCore.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_VRFCore *VRFCoreFilterer) ParseRoleGranted(log types.Log) (*VRFCoreRoleGranted, error) {
	event := new(VRFCoreRoleGranted)
	if err := _VRFCore.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VRFCoreRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the VRFCore contract.
type VRFCoreRoleRevokedIterator struct {
	Event *VRFCoreRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreRoleRevoked represents a RoleRevoked event raised by the VRFCore contract.
type VRFCoreRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_VRFCore *VRFCoreFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*VRFCoreRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoreRoleRevokedIterator{contract: _VRFCore.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_VRFCore *VRFCoreFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *VRFCoreRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreRoleRevoked)
				if err := _VRFCore.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_VRFCore *VRFCoreFilterer) ParseRoleRevoked(log types.Log) (*VRFCoreRoleRevoked, error) {
	event := new(VRFCoreRoleRevoked)
	if err := _VRFCore.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VRFCoreUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the VRFCore contract.
type VRFCoreUpgradedIterator struct {
	Event *VRFCoreUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreUpgraded represents a Upgraded event raised by the VRFCore contract.
type VRFCoreUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_VRFCore *VRFCoreFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*VRFCoreUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoreUpgradedIterator{contract: _VRFCore.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_VRFCore *VRFCoreFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *VRFCoreUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreUpgraded)
				if err := _VRFCore.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_VRFCore *VRFCoreFilterer) ParseUpgraded(log types.Log) (*VRFCoreUpgraded, error) {
	event := new(VRFCoreUpgraded)
	if err := _VRFCore.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VRFCoreVRFExecutedIterator is returned from FilterVRFExecuted and is used to iterate over the raw logs and unpacked data for VRFExecuted events raised by the VRFCore contract.
type VRFCoreVRFExecutedIterator struct {
	Event *VRFCoreVRFExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VRFCoreVRFExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoreVRFExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VRFCoreVRFExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VRFCoreVRFExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VRFCoreVRFExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VRFCoreVRFExecuted represents a VRFExecuted event raised by the VRFCore contract.
type VRFCoreVRFExecuted struct {
	RequestId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVRFExecuted is a free log retrieval operation binding the contract event 0xeba37516eae8078054e0eeb0ac756b908d5735aa72b5fac72f04da912287fab5.
//
// Solidity: event VRFExecuted(bytes32 indexed requestId)
func (_VRFCore *VRFCoreFilterer) FilterVRFExecuted(opts *bind.FilterOpts, requestId [][32]byte) (*VRFCoreVRFExecutedIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _VRFCore.contract.FilterLogs(opts, "VRFExecuted", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoreVRFExecutedIterator{contract: _VRFCore.contract, event: "VRFExecuted", logs: logs, sub: sub}, nil
}

// WatchVRFExecuted is a free log subscription operation binding the contract event 0xeba37516eae8078054e0eeb0ac756b908d5735aa72b5fac72f04da912287fab5.
//
// Solidity: event VRFExecuted(bytes32 indexed requestId)
func (_VRFCore *VRFCoreFilterer) WatchVRFExecuted(opts *bind.WatchOpts, sink chan<- *VRFCoreVRFExecuted, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _VRFCore.contract.WatchLogs(opts, "VRFExecuted", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VRFCoreVRFExecuted)
				if err := _VRFCore.contract.UnpackLog(event, "VRFExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVRFExecuted is a log parse operation binding the contract event 0xeba37516eae8078054e0eeb0ac756b908d5735aa72b5fac72f04da912287fab5.
//
// Solidity: event VRFExecuted(bytes32 indexed requestId)
func (_VRFCore *VRFCoreFilterer) ParseVRFExecuted(log types.Log) (*VRFCoreVRFExecuted, error) {
	event := new(VRFCoreVRFExecuted)
	if err := _VRFCore.contract.UnpackLog(event, "VRFExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
